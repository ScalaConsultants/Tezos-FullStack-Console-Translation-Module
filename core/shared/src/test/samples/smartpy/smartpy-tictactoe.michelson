parameter (pair (pair (int %i) (int %j)) (int %move));

storage (pair (pair (pair (pair (map %deck int (map int int)) (bool %draw)) (int %nbMoves)) (int %nextPlayer)) (int %winner));

code
  {
    # Entry point: play # pair(params, storage)
    # sp.verify((self.data.winner == 0) & (~ self.data.draw)) # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CDR;        # int.pair(params, storage)
    PUSH int 0; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    EQ;         # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAADR;    # bool.pair(params, storage)
        NOT;        # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {}
      {
        PUSH string "WrongCondition: (self.data.winner == 0) & (~ self.data.draw)"; # string.pair(params, storage)
        FAILWITH;   # pair(params, storage)
      }; # pair(params, storage)
    # sp.verify((params.i >= 0) & (params.i < 3)) # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CAR;        # Rec(i = intOrNat, j = intOrNat, move = int).pair(params, storage)
    CAAR;       # intOrNat.pair(params, storage)
    PUSH int 0; # intOrNat.intOrNat.pair(params, storage)
    SWAP;       # intOrNat.intOrNat.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    GE;         # bool.pair(params, storage)
    IF
      {
        PUSH int 3; # intOrNat.pair(params, storage)
        DUUP;       # pair(params, storage).intOrNat.pair(params, storage)
        CAAAR;      # intOrNat.intOrNat.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        LT;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {}
      {
        PUSH string "WrongCondition: (params.i >= 0) & (params.i < 3)"; # string.pair(params, storage)
        FAILWITH;   # pair(params, storage)
      }; # pair(params, storage)
    # sp.verify((params.j >= 0) & (params.j < 3)) # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CAR;        # Rec(i = intOrNat, j = intOrNat, move = int).pair(params, storage)
    CADR;       # intOrNat.pair(params, storage)
    PUSH int 0; # intOrNat.intOrNat.pair(params, storage)
    SWAP;       # intOrNat.intOrNat.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    GE;         # bool.pair(params, storage)
    IF
      {
        PUSH int 3; # intOrNat.pair(params, storage)
        DUUP;       # pair(params, storage).intOrNat.pair(params, storage)
        CAADR;      # intOrNat.intOrNat.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        LT;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {}
      {
        PUSH string "WrongCondition: (params.j >= 0) & (params.j < 3)"; # string.pair(params, storage)
        FAILWITH;   # pair(params, storage)
      }; # pair(params, storage)
    # sp.verify(params.move == self.data.nextPlayer) # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDADR;      # int.pair(params, storage)
    DUUP;       # pair(params, storage).int.pair(params, storage)
    CADR;       # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    EQ;         # bool.pair(params, storage)
    IF
      {}
      {
        PUSH string "WrongCondition: params.move == self.data.nextPlayer"; # string.pair(params, storage)
        FAILWITH;   # pair(params, storage)
      }; # pair(params, storage)
    # sp.verify(self.data.deck[params.i][params.j] == 0) # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAAAAR;     # [[int]].pair(params, storage)
    PUSH int 0; # int.[[int]].pair(params, storage)
    SWAP;       # [[int]].int.pair(params, storage)
    DUUUP;      # pair(params, storage).[[int]].int.pair(params, storage)
    CAAAR;      # intOrNat.[[int]].int.pair(params, storage)
    GET;        # option([int]).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].int.pair(params, storage)
      }; # [int].int.pair(params, storage)
    DUUUP;      # pair(params, storage).[int].int.pair(params, storage)
    CAADR;      # intOrNat.[int].int.pair(params, storage)
    GET;        # option(int).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # int.int.pair(params, storage)
      }; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    EQ;         # bool.pair(params, storage)
    IF
      {}
      {
        PUSH string "WrongCondition: self.data.deck[params.i][params.j] == 0"; # string.pair(params, storage)
        FAILWITH;   # pair(params, storage)
      }; # pair(params, storage)
    # self.data.deck[params.i][params.j] = params.move # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # storage.pair(params, storage)
    DUP;        # storage.storage.pair(params, storage)
    CAAAAR;     # [[int]].storage.pair(params, storage)
    DUUUP;      # pair(params, storage).[[int]].storage.pair(params, storage)
    CAAAR;      # intOrNat.[[int]].storage.pair(params, storage)
    PAIR;       # pair(intOrNat, [[int]]).storage.pair(params, storage)
    DUP;        # pair(intOrNat, [[int]]).pair(intOrNat, [[int]]).storage.pair(params, storage)
    DIP
      {
        UNPAIR;     # intOrNat.[[int]].storage.pair(params, storage)
      }; # pair(intOrNat, [[int]]).intOrNat.[[int]].storage.pair(params, storage)
    UNPAIR;     # intOrNat.[[int]].intOrNat.[[int]].storage.pair(params, storage)
    GET;        # option([int]).intOrNat.[[int]].storage.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].intOrNat.[[int]].storage.pair(params, storage)
      }; # [int].intOrNat.[[int]].storage.pair(params, storage)
    DUUUUUP;    # pair(params, storage).[int].intOrNat.[[int]].storage.pair(params, storage)
    CAADR;      # intOrNat.[int].intOrNat.[[int]].storage.pair(params, storage)
    DUUUUUUP;   # pair(params, storage).intOrNat.[int].intOrNat.[[int]].storage.pair(params, storage)
    CADR;       # int.intOrNat.[int].intOrNat.[[int]].storage.pair(params, storage)
    SOME;       # option(int).intOrNat.[int].intOrNat.[[int]].storage.pair(params, storage)
    SWAP;       # intOrNat.option(int).[int].intOrNat.[[int]].storage.pair(params, storage)
    UPDATE;     # [int].intOrNat.[[int]].storage.pair(params, storage)
    SOME;       # option([int]).intOrNat.[[int]].storage.pair(params, storage)
    SWAP;       # intOrNat.option([int]).[[int]].storage.pair(params, storage)
    UPDATE;     # [[int]].storage.pair(params, storage)
    SWAP;       # storage.[[int]].pair(params, storage)
    SET_CAAAAR; # storage.pair(params, storage)
    SWAP;       # pair(params, storage).storage
    CAR;        # params.storage
    PAIR;       # pair(params, storage)
    # self.data.nbMoves += 1 # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # storage.pair(params, storage)
    DUP;        # storage.storage.pair(params, storage)
    CAADR;      # intOrNat.storage.pair(params, storage)
    PUSH int 1; # intOrNat.intOrNat.storage.pair(params, storage)
    ADD;        # intOrNat.storage.pair(params, storage)
    SWAP;       # storage.intOrNat.pair(params, storage)
    SET_CAADR;  # storage.pair(params, storage)
    SWAP;       # pair(params, storage).storage
    CAR;        # params.storage
    PAIR;       # pair(params, storage)
    # self.data.nextPlayer = 3 - self.data.nextPlayer # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # storage.pair(params, storage)
    DUP;        # storage.storage.pair(params, storage)
    CADR;       # int.storage.pair(params, storage)
    PUSH int 3; # int.int.storage.pair(params, storage)
    SUB;        # int.storage.pair(params, storage)
    SWAP;       # storage.int.pair(params, storage)
    SET_CADR;   # storage.pair(params, storage)
    SWAP;       # pair(params, storage).storage
    CAR;        # params.storage
    PAIR;       # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAAAAR;     # [[int]].pair(params, storage)
    PUSH int 0; # int.[[int]].pair(params, storage)
    SWAP;       # [[int]].int.pair(params, storage)
    DUUUP;      # pair(params, storage).[[int]].int.pair(params, storage)
    CAAAR;      # intOrNat.[[int]].int.pair(params, storage)
    GET;        # option([int]).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].int.pair(params, storage)
      }; # [int].int.pair(params, storage)
    PUSH int 0; # intOrNat.[int].int.pair(params, storage)
    GET;        # option(int).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # int.int.pair(params, storage)
      }; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    NEQ;        # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        DUUP;       # pair(params, storage).[[int]].pair(params, storage)
        CAAAR;      # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 1; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        DUUUP;      # pair(params, storage).[[int]].int.pair(params, storage)
        CAAAR;      # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 0; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        DUUP;       # pair(params, storage).[[int]].pair(params, storage)
        CAAAR;      # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 2; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        DUUUP;      # pair(params, storage).[[int]].int.pair(params, storage)
        CAAAR;      # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 0; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        # self.data.winner = self.data.deck[params.i][0] # pair(params, storage)
        DUP;        # pair(params, storage).pair(params, storage)
        CDR;        # storage.pair(params, storage)
        DUP;        # storage.storage.pair(params, storage)
        CAAAAR;     # [[int]].storage.pair(params, storage)
        DUUUP;      # pair(params, storage).[[int]].storage.pair(params, storage)
        CAAAR;      # intOrNat.[[int]].storage.pair(params, storage)
        GET;        # option([int]).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].storage.pair(params, storage)
          }; # [int].storage.pair(params, storage)
        PUSH int 0; # intOrNat.[int].storage.pair(params, storage)
        GET;        # option(int).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.storage.pair(params, storage)
          }; # int.storage.pair(params, storage)
        SWAP;       # storage.int.pair(params, storage)
        CAR;        # [[int]].int.pair(params, storage)
        PAIR;       # pair([[int]], int).pair(params, storage)
        SWAP;       # pair(params, storage).storage
        CAR;        # params.storage
        PAIR;       # pair(params, storage)
      }
      {}; # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAAAAR;     # [[int]].pair(params, storage)
    PUSH int 0; # int.[[int]].pair(params, storage)
    SWAP;       # [[int]].int.pair(params, storage)
    PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
    GET;        # option([int]).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].int.pair(params, storage)
      }; # [int].int.pair(params, storage)
    DUUUP;      # pair(params, storage).[int].int.pair(params, storage)
    CAADR;      # intOrNat.[int].int.pair(params, storage)
    GET;        # option(int).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # int.int.pair(params, storage)
      }; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    NEQ;        # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 1; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        DUUP;       # pair(params, storage).[int].pair(params, storage)
        CAADR;      # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        DUUUP;      # pair(params, storage).[int].int.pair(params, storage)
        CAADR;      # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 2; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        DUUP;       # pair(params, storage).[int].pair(params, storage)
        CAADR;      # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        DUUUP;      # pair(params, storage).[int].int.pair(params, storage)
        CAADR;      # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        # self.data.winner = self.data.deck[0][params.j] # pair(params, storage)
        DUP;        # pair(params, storage).pair(params, storage)
        CDR;        # storage.pair(params, storage)
        DUP;        # storage.storage.pair(params, storage)
        CAAAAR;     # [[int]].storage.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].storage.pair(params, storage)
        GET;        # option([int]).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].storage.pair(params, storage)
          }; # [int].storage.pair(params, storage)
        DUUUP;      # pair(params, storage).[int].storage.pair(params, storage)
        CAADR;      # intOrNat.[int].storage.pair(params, storage)
        GET;        # option(int).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.storage.pair(params, storage)
          }; # int.storage.pair(params, storage)
        SWAP;       # storage.int.pair(params, storage)
        CAR;        # [[int]].int.pair(params, storage)
        PAIR;       # pair([[int]], int).pair(params, storage)
        SWAP;       # pair(params, storage).storage
        CAR;        # params.storage
        PAIR;       # pair(params, storage)
      }
      {}; # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAAAAR;     # [[int]].pair(params, storage)
    PUSH int 0; # int.[[int]].pair(params, storage)
    SWAP;       # [[int]].int.pair(params, storage)
    PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
    GET;        # option([int]).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].int.pair(params, storage)
      }; # [int].int.pair(params, storage)
    PUSH int 0; # intOrNat.[int].int.pair(params, storage)
    GET;        # option(int).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # int.int.pair(params, storage)
      }; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    NEQ;        # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 1; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 1; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 0; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 2; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 2; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 0; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        # self.data.winner = self.data.deck[0][0] # pair(params, storage)
        DUP;        # pair(params, storage).pair(params, storage)
        CDR;        # storage.pair(params, storage)
        DUP;        # storage.storage.pair(params, storage)
        CAAAAR;     # [[int]].storage.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].storage.pair(params, storage)
        GET;        # option([int]).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].storage.pair(params, storage)
          }; # [int].storage.pair(params, storage)
        PUSH int 0; # intOrNat.[int].storage.pair(params, storage)
        GET;        # option(int).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.storage.pair(params, storage)
          }; # int.storage.pair(params, storage)
        SWAP;       # storage.int.pair(params, storage)
        CAR;        # [[int]].int.pair(params, storage)
        PAIR;       # pair([[int]], int).pair(params, storage)
        SWAP;       # pair(params, storage).storage
        CAR;        # params.storage
        PAIR;       # pair(params, storage)
      }
      {}; # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAAAAR;     # [[int]].pair(params, storage)
    PUSH int 0; # int.[[int]].pair(params, storage)
    SWAP;       # [[int]].int.pair(params, storage)
    PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
    GET;        # option([int]).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # [int].int.pair(params, storage)
      }; # [int].int.pair(params, storage)
    PUSH int 2; # intOrNat.[int].int.pair(params, storage)
    GET;        # option(int).int.pair(params, storage)
    IF_SOME
      {}
      {
        FAIL;       # int.int.pair(params, storage)
      }; # int.int.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    NEQ;        # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 1; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 1; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 2; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        DUP;        # pair(params, storage).pair(params, storage)
        CDAAAAR;    # [[int]].pair(params, storage)
        PUSH int 2; # intOrNat.[[int]].pair(params, storage)
        GET;        # option([int]).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].pair(params, storage)
          }; # [int].pair(params, storage)
        PUSH int 0; # intOrNat.[int].pair(params, storage)
        GET;        # option(int).pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.pair(params, storage)
          }; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDAAAAR;    # [[int]].int.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].int.pair(params, storage)
        GET;        # option([int]).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].int.pair(params, storage)
          }; # [int].int.pair(params, storage)
        PUSH int 2; # intOrNat.[int].int.pair(params, storage)
        GET;        # option(int).int.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.int.pair(params, storage)
          }; # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        # self.data.winner = self.data.deck[0][2] # pair(params, storage)
        DUP;        # pair(params, storage).pair(params, storage)
        CDR;        # storage.pair(params, storage)
        DUP;        # storage.storage.pair(params, storage)
        CAAAAR;     # [[int]].storage.pair(params, storage)
        PUSH int 0; # intOrNat.[[int]].storage.pair(params, storage)
        GET;        # option([int]).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # [int].storage.pair(params, storage)
          }; # [int].storage.pair(params, storage)
        PUSH int 2; # intOrNat.[int].storage.pair(params, storage)
        GET;        # option(int).storage.pair(params, storage)
        IF_SOME
          {}
          {
            FAIL;       # int.storage.pair(params, storage)
          }; # int.storage.pair(params, storage)
        SWAP;       # storage.int.pair(params, storage)
        CAR;        # [[int]].int.pair(params, storage)
        PAIR;       # pair([[int]], int).pair(params, storage)
        SWAP;       # pair(params, storage).storage
        CAR;        # params.storage
        PAIR;       # pair(params, storage)
      }
      {}; # pair(params, storage)
    DUP;        # pair(params, storage).pair(params, storage)
    CDR;        # Rec(deck = [[int]], draw = bool, nbMoves = intOrNat, nextPlayer = int, winner = int).pair(params, storage)
    CAADR;      # intOrNat.pair(params, storage)
    PUSH int 9; # intOrNat.intOrNat.pair(params, storage)
    COMPARE;    # int.pair(params, storage)
    EQ;         # bool.pair(params, storage)
    IF
      {
        PUSH int 0; # int.pair(params, storage)
        DUUP;       # pair(params, storage).int.pair(params, storage)
        CDDR;       # int.int.pair(params, storage)
        COMPARE;    # int.pair(params, storage)
        EQ;         # bool.pair(params, storage)
      }
      {
        PUSH bool False; # bool.pair(params, storage)
      }; # bool.pair(params, storage)
    IF
      {
        # self.data.draw = True # pair(params, storage)
        DUP;        # pair(params, storage).pair(params, storage)
        CDR;        # storage.pair(params, storage)
        PUSH bool True; # bool.storage.pair(params, storage)
        SWAP;       # storage.bool.pair(params, storage)
        SET_CAAADR; # storage.pair(params, storage)
        SWAP;       # pair(params, storage).storage
        CAR;        # params.storage
        PAIR;       # pair(params, storage)
      }
      {}; # pair(params, storage)
    CDR;        # storage
    NIL operation; # operations.storage
    PAIR;       # pair(operations, storage)
  } # pair(operations, storage);